package euler;
/*
	+-------------------------------------------+
	|	Highly divisible triangular number		|
 	+-------------------------------------------+
	https://projecteuler.net/problem=12

	The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
	The first ten terms would be:

		1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

	Let us list the factors of the first seven triangle numbers:

		 1: 1
		 3: 1,3
		 6: 1,2,3,6
		10: 1,2,5,10
		15: 1,3,5,15
		21: 1,3,7,21
		28: 1,2,4,7,14,28

	We can see that 28 is the first triangle number to have over five divisors.

	What is the value of the first triangle number to have over five hundred divisors?

	+-----------------------------------+
	|	Strategy 						|
 	+-----------------------------------+
	Written 6/26/2020. @author Gooby

 	As ever, the brute force solution seems pretty clear: for each triangular number,
 	check divisibility for every number 1 <= i <= x and return the first that has at
 	least five hundred divisors.

 	The real consideration is whether there is a clever relationship between previous
 	triangular numbers such that we don't have to recompute the full set of divisors.
 	Unfortunately, there are pretty clear indicators that this is not true -- not the
 	least of which is the fact that primes will only have two divisors.

 	Another consideration is the size constraint: 500 divisors likely makes for a
 	large number, perhaps too large for ints.
*/

public class Problem12 {

	public static int numberOfDivisors(int n) {
		int divs = 0, sqrt = (int) Math.sqrt(n);
		for (int i = 1; i < sqrt; i++) {
			divs += (n % i == 0) ? 2 : 0;
		}

		// if n is a square, we need to prevent a double count
		if (sqrt * sqrt == n) divs--;
		return divs; 
	}

	public static int divisorsOfTriangularNumber(int n) {
		int tri = 0; // the i-th tri. num is simply the i - 1th + i
		int i = 1;
		while (numberOfDivisors(tri) < n) {
			tri += i;
			i++;
		}
		return tri;
	}

	public static void main(String[] args) {
		System.out.println(divisorsOfTriangularNumber(500));
	}
}
