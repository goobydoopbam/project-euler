package euler;

import java.util.Arrays;
/*
	+-----------------------------------+
	|	Largest product in a series		|
 	+-----------------------------------+
	https://projecteuler.net/problem=8

	The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

		73167176531330624919225119674426574742355349194934
		96983520312774506326239578318016984801869478851843
		85861560789112949495459501737958331952853208805511
		12540698747158523863050715693290963295227443043557
		66896648950445244523161731856403098711121722383113
		62229893423380308135336276614282806444486645238749
		30358907296290491560440772390713810515859307960866
		70172427121883998797908792274921901699720888093776
		65727333001053367881220235421809751254540594752243
		52584907711670556013604839586446706324415722155397
		53697817977846174064955149290862569321978468622482
		83972241375657056057490261407972968652414535100474
		82166370484403199890008895243450658541227588666881
		16427171479924442928230863465674813919123162824586
		17866458359124566529476545682848912883142607690042
		24219022671055626321111109370544217506941658960408
		07198403850962455444362981230987879927244284909188
		84580156166097919133875499200524063689912560717606
		05886116467109405077541002256983155200055935729725
		71636269561882670428252483600823257530420752963450

	Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

	+-----------------------------------+
	|	Strategy 						|
 	+-----------------------------------+
	Written 6/24/2020. @author Gooby

 	A simple starting solution probably looks like turning the above block of text into an array
 	and simply computing a rolling product, saving the maximum product that we find. The complex part
 	involves handling zeroes in the rolling product. The simplest solution might involve checking
 	to see if the number we are pulling out of the rolling product is zero and instead recomputing 
 	the product starting from that index + 1.

 	A brief consideration: for some inputs, (e.g. 999999999999999999), the largest product would
 	be greater than 2^31 - 1 and so would be unsuitable for an int value. Likewise, for some much
 	larger n, there could be similar issues.
*/

public class Problem8 {
	
	public static long findMaxProduct(String seq, int n) {
		int[] arr = new int[seq.length()];
		char[] c = seq.toCharArray();
		Arrays.setAll(arr, i -> c[i] - '0');

		long product = 1;
		long max = 0;
		int nums = 0;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] == 0) { // start our count over if we encounter a 0
				nums = 0;
				product = 1;
			}
			else if (nums == n) { // if we have n numbers, we have to remove the oldest multiple
				product /= arr[i - n];
				product *= arr[i];
			}
			else { // otherwise, we're just counting up to n
				nums++;
				product *= arr[i];
			}

			if (nums == n)
				max = Math.max(max, product);
		}

		return max;
	}

	public static void main(String[] args) {
		String sequence = "73167176531330624919225119674426574742355349194934"
						+ "96983520312774506326239578318016984801869478851843"
						+ "85861560789112949495459501737958331952853208805511"
						+ "12540698747158523863050715693290963295227443043557"
						+ "66896648950445244523161731856403098711121722383113"
						+ "62229893423380308135336276614282806444486645238749"
						+ "30358907296290491560440772390713810515859307960866"
						+ "70172427121883998797908792274921901699720888093776"
						+ "65727333001053367881220235421809751254540594752243"
						+ "52584907711670556013604839586446706324415722155397"
						+ "53697817977846174064955149290862569321978468622482"
						+ "83972241375657056057490261407972968652414535100474"
						+ "82166370484403199890008895243450658541227588666881"
						+ "16427171479924442928230863465674813919123162824586"
						+ "17866458359124566529476545682848912883142607690042"
						+ "24219022671055626321111109370544217506941658960408"
						+ "07198403850962455444362981230987879927244284909188"
						+ "84580156166097919133875499200524063689912560717606"
						+ "05886116467109405077541002256983155200055935729725"
						+ "71636269561882670428252483600823257530420752963450";

		System.out.println(findMaxProduct(sequence, 4));
		System.out.println(findMaxProduct(sequence, 13));
	}
}
